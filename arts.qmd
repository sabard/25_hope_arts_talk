---
title: ARTS Open Framework
author: "Sabar Dasgupta<br>s@bardasgupta.com<br>[https://sabard.github.io/25_hope_arts_talk](https://sabard.github.io/25_hope_arts_talk)"
center-title-slide: false
format: 
  html:
    css: style.css
  revealjs:
    theme: solarized
    navigation-mode: vertical
    css: style.css

---


# Background

## About me

- second time at HOPE
- realtime audio processing with LiCoRICE workshop
- accessible and hybrid infrastructure tools
- lighting and batteries
- systems neuroscience


## Problem statements

- papers are the standard research output
- data can be found, but can it be used?
- research development environments are varied
- rerun analyses decades into the future


## Public datasets

![[https://cgia.org/2025/04/upcoming-removal-of-noaa-datasets/](https://cgia.org/2025/04/upcoming-removal-of-noaa-datasets/)](figs/noaa_removal.png)


## Goals

- validate and communicate scientific knowledge
- make code and data available and usable
- help maintain historical records


## Existing solutions

- [Code Ocean](https://codeocean.com/)
- [Brainlife](https://brainlife.io/)
- [Whole Tale](https://wholetale.org/)

---

We need a framework that is **open, modular, and easy to maintain** to support the many existing (and new!) research workflows


# Archival, reproducible, and transparent science (ARTS) Open Framework

![](figs/workflow.svg)

## Archival, reproducible, and transparent science (ARTS) Open Framework

- Licensing
- Archives
- Version Control
- Containers
- Provenance
- Documentation
- Configuration


## ARTS paper

[https://arxiv.org/abs/2504.08171](https://arxiv.org/abs/2504.08171)

![First version available on arxiv](figs/arts_arxiv.png){}


## Licensing

:::: {.columns}
::: {.column width="60%"}

![Open source licenses [(CC BY-SA)](https://creativecommons.org/licenses/by-sa/4.0/)](figs/licenses.svg)

:::
::: {.column width="40%"}

- define terms for code *and* data!
- copyright is default in most jurisdictions
- great if you can open source

:::
::::


## Archives

Archives should be *accessible, persistent, and trusted*

![Storage options [(CC BY-SA)](https://creativecommons.org/licenses/by-sa/4.0/)](figs/storage_options.svg)

<!--
- archives must be trusted, persistent, and ?
- if they can't well meet these criteria (and pretty much all do not!):
	- archives must either be decentralized with a well-documented
- if deposition process is automated, can upload to multiple archives 
- code ocean case study?
-->

## Software Version Control

- create historical record of research performed
- merge over rebase to preserve the record
- supports multiple repositories

:::: {.columns}
::: {.column width="33%"}

![Git [(CC BY)](https://creativecommons.org/licenses/by/3.0/)](figs/git_icon.svg){.relative height=200}

:::
::: {.column width="33%"}

![Mercurial [(GPLv2)](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html)](figs/mercurial_icon.svg){.relative height=200}

:::
::: {.column width="33%"}

![Subversion [(Apache 2.0)](https://www.apache.org/licenses/LICENSE-2.0)](figs/svn_icon.svg){.relative height=200}

:::
::::

## Containers 

- standalone, executable packages that include everything needed to run an application
- Containerfile vs. container image
- podman, Docker, and Apptainer (formerly Singularity) are popular container engines
- can be large (~1-10G) for research environments

## Provenance—Trusted Timestamping

- Github link: [https://github.com/bil/timestamping](https://github.com/bil/timestamping)
- [RFC 3161](https://www.ietf.org/rfc/rfc3161.txt)
- data hash signed by multiple timestamp authorities
- provides a verifiable electronic lab notebook when used with version control

![Trusted timestamping](figs/timestamp.png)


## Documentation

- arguably the most important part of any deposition
- ideally should exist at multiple levels
- most important is setup, run, and usage instructions


## Configuration and File Structure

:::: {.columns}
::: {.column width="60%"}

- ARTS is intentionally unopinionated
- requires the presence of a `config.env` file
- dictates how to interpret the deposition

:::
::: {.column width="40%"}

![File structure [(CC BY-SA)](https://creativecommons.org/licenses/by-sa/4.0/)](figs/file_structure_minimal.png){}

:::
::::


# Example deposition: Watch Calibration

:::: {.columns}
::: {.column width="60%"}

- record the ticks from a mechanicalwatch movement with your laptop microphone
- write some Python code to analyze it
- archive your results, code, data, and environment

:::
::: {.column width="40%"}

![[Watch movement](https://commons.wikimedia.org/wiki/File:Watch_movement.png)](figs/watch_movement.png){}

:::
::::

## Outputs—Jupyter notebook

![Notebook running in container](figs/watch_calibration.png)

## Deposition availability

- Licenses: GPLv3 and CC BY-SA 4.0
- Version control system: git
- Archives: SDR ([https://doi.org/10.25740/vs897sz1847](https://doi.org/10.25740/vs897sz1847)) and Zenodo ([https://zenodo.org/records/15232081](https://zenodo.org/records/15232081))

## Containerfile

![](figs/containerfile.png)

## Data provenance

![](figs/provenance.png)


## README

::: {.center-xy}
![](figs/watch_calibration_readme.png){height=550}
:::

## config.env

![](figs/config.png)


## MyBinder

[MyBinder demo link](https://gesis.mybinder.org/v2/gh/bil/watch-calibration/binder?urlpath=%2Fdoc%2Ftree%2Fnotebooks%2FWatch+Calibration.ipynb)

https://tinyurl.com/yck4r5xe


# Questions? {.center style="text-align: center;"}
